type: edu
custom_name: stage5
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {
        final String input;
        String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("10\n0.234\n7", "0.14315", true),
                testToAnswer("10\n10.234\n7", "13.14315", true),
                testToAnswer("6\n2.555\n1", "11", true),
                testToAnswer("35\naf.xy\n17", "148.g88a8", true),
                testToAnswer("10\n11\n2", "1011", true),
                testToAnswer("16\naaaaa.0\n24", "22df2.00000", true),
                testToAnswer("16\n0.cdefb\n24", "0.j78da", true),
                testToAnswer("16\naaaaa.cdefb\n24", "22df2.j78da", true),

                /* Tests without a hint: */
                testToAnswer("10\n0.2340\n7", "0.14315", false),
                testToAnswer("10\n10.2340\n7", "13.14315", false),
                testToAnswer("6\n2.5550\n1", "11", false),
                testToAnswer("35\naf.xy0\n17", "148.g88a8", false),
                testToAnswer("10\n12\n2", "1100", false),
                testToAnswer("16\naaaaa.00\n24", "22df2.00000", false),
                testToAnswer("16\n0.cdefb0\n24", "0.j78da", false),
                testToAnswer("16\naaaaa.cdefb0\n24", "22df2.j78da", false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            String answer = lines[lines.length - 1];
            answer = answer.replaceAll("[^\\p{Graph}]", "");
            clue.answer = clue.answer.replaceAll("[^\\p{Graph}]", "");

            answer = removeEndZeros(answer);
            clue.answer = removeEndZeros(clue.answer);

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your answer is wrong.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your answer is wrong."
                    );
                }
            }

            return new CheckResult(true);
        }

        private String removeEndZeros(String number) {
            if (!number.contains(".")) {
                return number;
            }
            while (number.endsWith("0")) {
                number = number.substring(0, number.length() - 1);
            }
            if (number.endsWith(".")) {
                number = number.substring(0, number.length() - 1);
            }
            return number;
        }
    }
  learner_created: false
- name: src/converter/convertionFromDecimal.java
  visible: true
  text: |
    package converter;

    public class convertionFromDecimal {

        public String convertFromDecimal (long number, long base) {
            StringBuilder answer = new StringBuilder("");
            do {
                int n1 = (int) (number % base);
                number = number / base;

                if (base == 1) {
                    n1 = 1;
                    number -= 1;
                }

                if (n1 < 10) {
                    answer.append(n1);
                }
                if (n1 >= 10 && n1 < 37) {
                    char a = (char) (n1 + 87);
                    answer.append(a);
                }

                if (number < base && number != 0) {
                    if (number < 10) {
                        answer.append(number);
                    }
                    if (number >= 10 && number < 37) {
                        char a = (char) (number + 87);
                        answer.append(a);
                    }
                }

            } while (number >= base);

    //        if (base == 16) {
    //            answer.append("x0");
    //        } else if (base == 2) {
    //            answer.append("b0");
    //        } else if (base == 8) {
    //            answer.append("0");
    //        }

            return answer.reverse().toString();
        }
    }
  learner_created: true
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);
            convertionToBase cb = new convertionToBase();
            convertionFromDecimal cd = new convertionFromDecimal();

            int rad1 = scan.nextInt();
            String number = scan.next();
            int rad2 = scan.nextInt();

            long numberInDec = cb.convertToBase(rad1, number);
            String answer = cd.convertFromDecimal(numberInDec, rad2);

            System.out.println(answer);
        }

        public long getFractions
    }
  learner_created: true
- name: src/converter/convertionToDecimal.java
  visible: true
  text: |
    package converter;

    public class convertionToBase {
        public long convertToBase (long base1In, String numberIn) {

    //        if (base1In == 16 || base1In == 2) {
    //            numberIn.substring(2);
    //        } else if (base1In == 8) {
    //            numberIn.substring(1);
    //        }

            long answer = 0;

            for (int i = 0; i < numberIn.length(); i++) {
                char ch1 = numberIn.charAt(i);
                long numChar = (long) ch1;
                long num1 = 0;

                if (numChar > 47 && numChar < 58) {
                    String s = String.valueOf(ch1);
                    num1 = Long.parseLong(s);
                } else if (numChar > 96 && numChar < 123) {
                    num1 = (-87 + numChar);
                }
                answer += num1 * (long) Math.pow(base1In, numberIn.length() - 1 - i);
            }

            return answer;
        }
    }
  learner_created: true
- name: src/converter/convertFractionToDec.java
  visible: true
  learner_created: true
- name: src/converter/convertFractionToBase.java
  visible: true
  learner_created: true
- name: src/converter/convertFractional.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/218/implement
status: Solved
record: -1
